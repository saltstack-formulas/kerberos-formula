{% raw %}
#######################################################################
# This file is managed by salt. Manual changes risk being overwritten. 
# The contents of an example skeleton kdc.conf are stored at the       
# bottom as a quick reference.                                         
#######################################################################
{% endraw %}

{%- macro makeoutput(outdict) -%}
  {%- for key, value in outdict|dictsort -%}
  {{ output(key, value) }}
  {%- endfor %}
{%- endmacro -%}

{%- macro output(key, value, spaces=0) -%}
  {%- set shift = spaces * " " %}
  {%- set newline = "\n" -%}
  {%- if value is mapping %}
    {{ shift }}{{ key }} = {
    {%- for key, value in value|dictsort -%}
    {{ output(key, value, spaces=spaces+4) }}
    {%- endfor %}
    {{ shift }}}
  {%- elif key == '#' -%}
    {{ newline }}{{ key }} {{ value }}
  {%- elif value is string or value is number %}
    {{ shift }}{{ key }} = {{ value }}
  {%- elif value -%}
    {%- for value in value -%}
    {{ output(key, value, spaces=spaces) }}
    {%- endfor %}
  {%- endif %}
{%- endmacro -%}

{%- macro comment(str) -%}
  {{ output("#", str) }}
{%- endmacro -%}

{% from "kerberos/map.jinja" import kerberos with context %}

[kdcdefaults]
  {%- set kdcdefaults = kerberos.kdc.get('kdcdefaults', {}) -%}
  {{ makeoutput(kdcdefaults) if kdcdefaults else comment('Using software defaults') }}

[realms]
  {%- set realms = kerberos.kdc.get('realms', {}) -%}
  {{ makeoutput(realms) if realms else comment('Using software defaults') }}

[dbdefaults]
  {%- set dbdefaults = kerberos.kdc.get('dbdefaults', {}) -%}
  {{ makeoutput(dbdefaults) if dbdefaults else comment('Using software defaults') }}

[dbmodules]
  {%- set dbmodules = kerberos.kdc.get('dbmodules', {}) -%}
  {{ makeoutput(dbmodules) if dbmodules else comment('Using software defaults') }}

[otp]
  {%- set otp = kerberos.kdc.get('otp', {}) -%}
  {{ makeoutput(otp) if otp else comment('Using software defaults') }}

[logging]
  {%- set logging = kerberos.kdc.get('logging', {}) -%}
  {{ makeoutput(logging) if logging else comment('Using software defaults') }}

#
# skeleton kdc.conf for reference
#
# This kdc.conf can be used to control the listening ports of the
# KDC and kadmind, as well as realm-specific defaults, database type
# and location, and logging. The file is used by KDC programs such as
# the krb5kdc and kadmind daemons. Uses same format as krb5.conf file.

#====================== kdcdefaults ==============================
;[kdcdefaults]
# Default values for KDC behavior
#
# Lists ports the Kerberos server should listen for UDP requests,
# as comma-separated list of integers. The default value is 88, 750,
# the assigned Kerberos port and port historically used by Kerberos V4.
;kdc_ports = 88,750
#
# Lists ports the Kerberos server should listen for TCP connections,
# as a comma-separated list of integers. If not specified, the
# compiled-in default is not to listen for TCP connections at all.
;kdc_tcp_ports = 88,750
#
# Name of the principal associated with the master key.
;master_key_name = K/M
#
# Specifies the master keys key type.
;master_key_type = aes256-cts-hmac-sha1-96
#
# KDC to reject ticket requests from anonymous principals to service
# principals other than realms ticket-granting service (def: false).
;restrict_anonymous_to_tgt = false
#
#How the KDC should respond to Kerberos 4 packets. Supported values
# are none, disable, full, and nopreauth. Default value is none.
;v4_mode = none
#
#======================= realms ==================================
;[realms]
# Realm-specific database configuration and settings
;EXAMPLE.COM = {
;      kdc_ports = 88
;      kadmind_port = 749
;      max_life = 12h 0m 0s
;      max_renewable_life = 7d 0h 0m 0s
;      master_key_type = des3-hmac-sha1
;      default_principal_flags = +preauth
;      supported_enctypes = arcfour-hmac:normal des3-hmac-sha1:normal des-cbc-crc:normal des:normal des:v4 des:norealm des:onlyrealm des:afs3
#      If the default location does not suit your setup,
#      explicitly configure the values below. Ensure write
#      permission on the target directories (which must exist)
;      #    admin_keytab = /etc/krb5/kadm5.keytab
;      #    database_name = /var/kerberos/krb5kdc/principal
;      #    acl_file = /var/kerberos/krb5kdc/kadm5.acl
;      #    key_stash_file = /var/kerberos/krb5kdc/stash
;}
#
#
#====================== dbdefaults ===============================
;[dbdefaults]
# Default database settings
;ldap_kerberos_container_dn = cn=krbcontainer, dc=example, dc=com
;ldap_kerberos_container_dn = cn=krbcontainer, dc=hadoop, dc=example, dc=com
#
#
#====================== dbmodules ================================
;[dbmodules]
# Per-database settings
;   openldap_ldapconf = {
;       db_library = kldap
;       disable_last_success = true
;       ldap_kdc_dn = "cn=krbadmin,dc=example,dc=com"
;           # this object needs to have read rights on
;           # the realm container and principal subtrees
;       ldap_kadmind_dn = "cn=krbadmin,dc=example,dc=com"
;           # this object needs to have read and write rights on
;           # the realm container and principal subtrees
;       ldap_service_password_file = /etc/kerberos/service.keyfile
;       ldap_servers = ldaps://kerberos1.example.com
;       ldap_conns_per_server = 5
;   }
#
#
#====================== logging ==================================
;[logging]
# Controls how Kerberos daemons perform logging. By default, KDC 
# and kadmind log using syslog. You can override here.
;   kdc = CONSOLE
;   kdc = SYSLOG:INFO:DAEMON
;   kdc = FILE:/var/log/krb5kdc.log
;   admin_server = FILE:/var/log/kadmin.log
;   admin_server = DEVICE=/dev/tty04
;   default = FILE:/var/log/krb5lib.log
#
#==========================otp ==================================
;[otp]
# Support for onetime password requests. MIT Kerberos only
;  MyRemoteTokenType = {
;      # Server to send the RADIUS request to.
;      server = 
;      timeout =
;      retries = 3
;      strip_realm = true
;  }
